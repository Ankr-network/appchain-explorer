syntax = "proto3";

option java_package = "com.ankr.proto";
option java_outer_classname = "StakingGatewayProto";

option go_package = "./shared/types;types";

package com.ankr;

message ChainNativeCurrency {
  string name = 1;
  string symbol = 2;
  uint32 decimals = 3;
}

message ChainExplorer {
  string name = 1;
  string url = 2;
  string standard = 3;
}

message Chain {
  uint64 chain_id = 1;
  string project_url = 2;
  string name = 3;
  string short_name = 4;
  repeated string rpc = 5;
  repeated string faucet = 6;
  ChainNativeCurrency native_currency = 7;
  repeated ChainExplorer explorer = 8;
}

enum ValidatorStatus {
  VALIDATOR_STATUS_NOT_FOUND = 0;
  VALIDATOR_STATUS_ACTIVE = 1;
  VALIDATOR_STATUS_PENDING = 2;
  VALIDATOR_STATUS_JAIL = 3;
}

message Validator {
  string address = 1;
  string owner = 2;
  ValidatorStatus status = 3;
  uint32 commission = 4;
}

message ValidatorHistory {
  string address = 1;
  Validator changes = 2;
  string transaction_hash = 3;
  uint64 block_number = 4;
}

message ValidatorDeposit {
  string validator = 1;
  string amount = 2;
  uint64 epoch = 3;
  string transaction_hash = 4;
  uint64 block_number = 5;
}

message ValidatorSlashing {
  string validator = 1;
  uint64 epoch = 2;
  uint32 slashings = 3;
  string transaction_hash = 4;
  uint64 block_number = 5;
}

message ValidatorEvent {
  message EventFields {
    string validator = 1;
    string staker = 2;
    string amount = 3;
    string dust = 4;
    uint64 epoch = 5;
  }
  oneof event {
    EventFields delegated = 100;
    EventFields undelegated = 101;
    EventFields claimed = 102;
    EventFields redelegated = 103;
  }
  string transaction_hash = 1;
  uint64 block_number = 2;
}

message Delegator {
  string staker = 1;
  string total_delegated = 2;
  uint64 epoch = 3;
}

/**
 *        ____  ____   ____
 *   __ _|  _ \|  _ \ / ___|
 *  / _` | |_) | |_) | |
 * | (_| |  _ <|  __/| |___
 *  \__, |_| \_\_|    \____|
 *  |___/
 *
 **/

service StakingGateway {
  rpc GetValidators(GetValidatorsRequest) returns (GetValidatorsReply);
  rpc GetValidatorHistory(GetValidatorHistoryRequest) returns (GetValidatorHistoryReply);
  rpc GetValidatorSlashings(GetValidatorSlashingsRequest) returns (GetValidatorSlashingsReply);
  rpc GetValidatorDeposits(GetValidatorDepositsRequest) returns (GetValidatorDepositsReply);
  rpc GetValidatorEvents(GetValidatorEventsRequest) returns (GetValidatorEventsReply);
  rpc GetChains(GetChainsRequest) returns (GetChainsReply);
  rpc GetDelegators(GetDelegatorsRequest) returns (GetDelegatorsReply);
}

message GetValidatorsRequest {
  uint32 offset = 1;
  uint32 size = 2;
}
message GetValidatorsReply {
  repeated Validator validators = 1;
  bool has_more = 2;
}

message GetValidatorHistoryRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string validator = 3;
}
message GetValidatorHistoryReply {
  repeated ValidatorHistory validator_histories = 1;
  bool has_more = 2;
}

message GetValidatorSlashingsRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string validator = 3;
}
message GetValidatorSlashingsReply {
  repeated ValidatorSlashing validator_slashings = 1;
  bool has_more = 2;
}

message GetValidatorDepositsRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string validator = 3;
}
message GetValidatorDepositsReply {
  repeated ValidatorDeposit validator_deposits = 1;
  bool has_more = 2;
}

message GetValidatorEventsRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string validator = 3;
}
message GetValidatorEventsReply {
  repeated ValidatorEvent validator_events = 1;
  bool has_more = 2;
}

message GetChainsRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string chain = 3;
}
message GetChainsReply {
  repeated Chain chains = 1;
  bool has_more = 2;
}

message GetDelegatorsRequest {
  uint32 offset = 1;
  uint32 size = 2;
  string validator = 3;
}
message GetDelegatorsReply {
  repeated Delegator delegators = 1;
  bool has_more = 2;
}