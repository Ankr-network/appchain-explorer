// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionStatus int32

const (
	TransactionStatus_FAILED  TransactionStatus = 0
	TransactionStatus_SUCCESS TransactionStatus = 1
	TransactionStatus_PENDING TransactionStatus = 2
)

var TransactionStatus_name = map[int32]string{
	0: "FAILED",
	1: "SUCCESS",
	2: "PENDING",
}

var TransactionStatus_value = map[string]int32{
	"FAILED":  0,
	"SUCCESS": 1,
	"PENDING": 2,
}

func (x TransactionStatus) String() string {
	return proto.EnumName(TransactionStatus_name, int32(x))
}

func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}

type TransactionType int32

const (
	TransactionType_CONTRACT_CALL TransactionType = 0
	TransactionType_TRANSFER      TransactionType = 1
	TransactionType_UNKNOWN       TransactionType = 2
)

var TransactionType_name = map[int32]string{
	0: "CONTRACT_CALL",
	1: "TRANSFER",
	2: "UNKNOWN",
}

var TransactionType_value = map[string]int32{
	"CONTRACT_CALL": 0,
	"TRANSFER":      1,
	"UNKNOWN":       2,
}

func (x TransactionType) String() string {
	return proto.EnumName(TransactionType_name, int32(x))
}

func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{1}
}

type CallArg struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallArg) Reset()         { *m = CallArg{} }
func (m *CallArg) String() string { return proto.CompactTextString(m) }
func (*CallArg) ProtoMessage()    {}
func (*CallArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}
func (m *CallArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallArg.Merge(m, src)
}
func (m *CallArg) XXX_Size() int {
	return m.Size()
}
func (m *CallArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CallArg.DiscardUnknown(m)
}

var xxx_messageInfo_CallArg proto.InternalMessageInfo

func (m *CallArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CallArg) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CallArg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Transaction struct {
	TxHash               string            `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Status               TransactionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=com.ankr.TransactionStatus" json:"status,omitempty"`
	Value                string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	TxFee                string            `protobuf:"bytes,4,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	BlockNumber          uint32            `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Timestamp            uint32            `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Error                string            `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	Sender               string            `protobuf:"bytes,8,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient            string            `protobuf:"bytes,9,opt,name=recipient,proto3" json:"recipient,omitempty"`
	MethodName           string            `protobuf:"bytes,10,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	TxType               TransactionType   `protobuf:"varint,11,opt,name=tx_type,json=txType,proto3,enum=com.ankr.TransactionType" json:"tx_type,omitempty"`
	TokenTransfers       []*TokenTransfer  `protobuf:"bytes,12,rep,name=token_transfers,json=tokenTransfers,proto3" json:"token_transfers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Transaction) GetStatus() TransactionStatus {
	if m != nil {
		return m.Status
	}
	return TransactionStatus_FAILED
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetTxFee() string {
	if m != nil {
		return m.TxFee
	}
	return ""
}

func (m *Transaction) GetBlockNumber() uint32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Transaction) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Transaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Transaction) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *Transaction) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *Transaction) GetTxType() TransactionType {
	if m != nil {
		return m.TxType
	}
	return TransactionType_CONTRACT_CALL
}

func (m *Transaction) GetTokenTransfers() []*TokenTransfer {
	if m != nil {
		return m.TokenTransfers
	}
	return nil
}

type TransactionDetails struct {
	TxHash               string            `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Status               TransactionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=com.ankr.TransactionStatus" json:"status,omitempty"`
	Error                string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	BlockNumber          uint32            `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	CreatedAt            uint32            `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ConfirmedAt          uint32            `protobuf:"varint,6,opt,name=confirmed_at,json=confirmedAt,proto3" json:"confirmed_at,omitempty"`
	Sender               string            `protobuf:"bytes,7,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient            string            `protobuf:"bytes,8,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Value                string            `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	TxFee                string            `protobuf:"bytes,10,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	GasPrice             uint64            `protobuf:"varint,11,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit             uint64            `protobuf:"varint,12,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              uint64            `protobuf:"varint,13,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Type                 uint32            `protobuf:"varint,14,opt,name=type,proto3" json:"type,omitempty"`
	Nonce                uint32            `protobuf:"varint,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Index                uint32            `protobuf:"varint,16,opt,name=index,proto3" json:"index,omitempty"`
	MethodId             string            `protobuf:"bytes,17,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	MethodName           string            `protobuf:"bytes,18,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Signature            string            `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	RawInput             string            `protobuf:"bytes,20,opt,name=raw_input,json=rawInput,proto3" json:"raw_input,omitempty"`
	TokenTransfers       []*TokenTransfer  `protobuf:"bytes,21,rep,name=token_transfers,json=tokenTransfers,proto3" json:"token_transfers,omitempty"`
	Args                 []*CallArg        `protobuf:"bytes,22,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransactionDetails) Reset()         { *m = TransactionDetails{} }
func (m *TransactionDetails) String() string { return proto.CompactTextString(m) }
func (*TransactionDetails) ProtoMessage()    {}
func (*TransactionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{2}
}
func (m *TransactionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionDetails.Merge(m, src)
}
func (m *TransactionDetails) XXX_Size() int {
	return m.Size()
}
func (m *TransactionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionDetails proto.InternalMessageInfo

func (m *TransactionDetails) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TransactionDetails) GetStatus() TransactionStatus {
	if m != nil {
		return m.Status
	}
	return TransactionStatus_FAILED
}

func (m *TransactionDetails) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionDetails) GetBlockNumber() uint32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionDetails) GetCreatedAt() uint32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *TransactionDetails) GetConfirmedAt() uint32 {
	if m != nil {
		return m.ConfirmedAt
	}
	return 0
}

func (m *TransactionDetails) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransactionDetails) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *TransactionDetails) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionDetails) GetTxFee() string {
	if m != nil {
		return m.TxFee
	}
	return ""
}

func (m *TransactionDetails) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TransactionDetails) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionDetails) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TransactionDetails) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TransactionDetails) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionDetails) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetails) GetMethodId() string {
	if m != nil {
		return m.MethodId
	}
	return ""
}

func (m *TransactionDetails) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *TransactionDetails) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *TransactionDetails) GetRawInput() string {
	if m != nil {
		return m.RawInput
	}
	return ""
}

func (m *TransactionDetails) GetTokenTransfers() []*TokenTransfer {
	if m != nil {
		return m.TokenTransfers
	}
	return nil
}

func (m *TransactionDetails) GetArgs() []*CallArg {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterEnum("com.ankr.TransactionStatus", TransactionStatus_name, TransactionStatus_value)
	proto.RegisterEnum("com.ankr.TransactionType", TransactionType_name, TransactionType_value)
	proto.RegisterType((*CallArg)(nil), "com.ankr.CallArg")
	proto.RegisterType((*Transaction)(nil), "com.ankr.Transaction")
	proto.RegisterType((*TransactionDetails)(nil), "com.ankr.TransactionDetails")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490) }

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x4e, 0x1b, 0x3b,
	0x18, 0x25, 0xe4, 0xff, 0x4b, 0x08, 0x89, 0x6f, 0x00, 0x73, 0xe1, 0xe6, 0x52, 0xa4, 0x4a, 0x88,
	0x45, 0x90, 0x60, 0x55, 0x75, 0xd1, 0x26, 0x21, 0xb4, 0x51, 0xa3, 0x01, 0x4d, 0x82, 0x2a, 0x75,
	0x33, 0x32, 0x33, 0x26, 0x19, 0x91, 0xf1, 0x8c, 0x6c, 0xa7, 0x84, 0x37, 0xe9, 0x43, 0x74, 0xdf,
	0x57, 0xe8, 0xb2, 0x8f, 0x50, 0xd1, 0x17, 0xa9, 0x6c, 0x0f, 0xc9, 0x34, 0xd0, 0x45, 0xa5, 0x6e,
	0x12, 0x9f, 0xf3, 0x7d, 0xfe, 0x3c, 0x73, 0xce, 0xf1, 0x40, 0x4d, 0x72, 0xc2, 0x04, 0x71, 0xa5,
	0x1f, 0xb2, 0x66, 0xc4, 0x43, 0x19, 0xa2, 0x82, 0x1b, 0x06, 0x4d, 0xc2, 0x6e, 0xf8, 0xbf, 0x75,
	0x19, 0xde, 0x50, 0xe6, 0xe8, 0x96, 0x6b, 0xca, 0x4d, 0x7d, 0xbf, 0x0b, 0xf9, 0x0e, 0x99, 0x4c,
	0x5a, 0x7c, 0x84, 0x10, 0x64, 0x18, 0x09, 0x28, 0x4e, 0xed, 0xa5, 0x0e, 0x8a, 0xb6, 0x5e, 0x2b,
	0x4e, 0xde, 0x45, 0x14, 0xaf, 0x1a, 0x4e, 0xad, 0x15, 0xe7, 0x11, 0x49, 0x70, 0xda, 0x70, 0x6a,
	0xbd, 0xff, 0x39, 0x0d, 0xa5, 0xe1, 0xe2, 0x70, 0xb4, 0x05, 0x79, 0x39, 0x73, 0xc6, 0x44, 0x8c,
	0xe3, 0x71, 0x39, 0x39, 0x7b, 0x4b, 0xc4, 0x18, 0x9d, 0x40, 0x4e, 0x48, 0x22, 0xa7, 0x42, 0x8f,
	0xac, 0x1c, 0xef, 0x34, 0x1f, 0x1e, 0xb0, 0x99, 0xd8, 0x3f, 0xd0, 0x2d, 0x76, 0xdc, 0x8a, 0xea,
	0x90, 0xfd, 0x48, 0x26, 0x53, 0x1a, 0x1f, 0x69, 0x00, 0xda, 0x80, 0x9c, 0x9c, 0x39, 0xd7, 0x94,
	0xe2, 0x8c, 0xa1, 0xe5, 0xec, 0x8c, 0x52, 0xf4, 0x0c, 0xca, 0x57, 0x93, 0xd0, 0xbd, 0x71, 0xd8,
	0x34, 0xb8, 0xa2, 0x1c, 0x67, 0xf7, 0x52, 0x07, 0x6b, 0x76, 0x49, 0x73, 0x96, 0xa6, 0xd0, 0x2e,
	0x14, 0xa5, 0x1f, 0x50, 0x21, 0x49, 0x10, 0xe1, 0x9c, 0xae, 0x2f, 0x08, 0x75, 0x1a, 0xe5, 0x3c,
	0xe4, 0x38, 0x6f, 0xc6, 0x6a, 0x80, 0x36, 0x21, 0x27, 0x28, 0xf3, 0x28, 0xc7, 0x05, 0xf3, 0x42,
	0x06, 0xa9, 0x59, 0x9c, 0xba, 0x7e, 0xe4, 0x53, 0x26, 0x71, 0x51, 0x97, 0x16, 0x04, 0xfa, 0x1f,
	0x4a, 0x01, 0x95, 0xe3, 0xd0, 0x73, 0xb4, 0xb4, 0xa0, 0xeb, 0x60, 0x28, 0x4b, 0x09, 0x7c, 0xac,
	0x85, 0xd2, 0x1a, 0x97, 0xb4, 0x20, 0xdb, 0x4f, 0x0a, 0x32, 0xbc, 0x8b, 0xa8, 0xd2, 0x50, 0xfd,
	0xa3, 0xd7, 0xb0, 0xfe, 0xab, 0x97, 0x02, 0x97, 0xf7, 0xd2, 0x07, 0xa5, 0xe3, 0xad, 0xc4, 0x5e,
	0xd5, 0x30, 0x8c, 0xeb, 0x76, 0x45, 0x26, 0xa1, 0xd8, 0xff, 0x92, 0x05, 0x94, 0x98, 0x7e, 0x4a,
	0x25, 0xf1, 0x27, 0xe2, 0xef, 0xbb, 0x66, 0x74, 0x4c, 0x27, 0x75, 0x5c, 0xb6, 0x27, 0xf3, 0xd8,
	0x9e, 0xff, 0x00, 0x5c, 0x4e, 0x89, 0xa4, 0x9e, 0x43, 0x64, 0xec, 0x5f, 0x31, 0x66, 0x5a, 0x52,
	0x4d, 0x70, 0x43, 0x76, 0xed, 0xf3, 0xc0, 0x34, 0x18, 0x03, 0x4b, 0x73, 0xae, 0x25, 0x13, 0x66,
	0xe5, 0x7f, 0x6f, 0x56, 0x61, 0xd9, 0xac, 0x79, 0xcc, 0x8a, 0x4f, 0xc7, 0x0c, 0x92, 0x31, 0xdb,
	0x81, 0xe2, 0x88, 0x08, 0x27, 0xe2, 0xbe, 0x6b, 0xac, 0xcb, 0xd8, 0x85, 0x11, 0x11, 0x17, 0x0a,
	0x3f, 0x14, 0x27, 0x7e, 0xe0, 0x4b, 0x5c, 0x9e, 0x17, 0xfb, 0x0a, 0xa3, 0x6d, 0x50, 0x6b, 0x67,
	0x2a, 0xa8, 0x87, 0xd7, 0x74, 0x2d, 0x3f, 0x22, 0xe2, 0x52, 0x50, 0x6f, 0x7e, 0xdd, 0x2a, 0xfa,
	0x95, 0xcc, 0x75, 0xab, 0x43, 0x96, 0x85, 0xcc, 0xa5, 0x78, 0x5d, 0x93, 0x06, 0x28, 0xd6, 0x67,
	0x1e, 0x9d, 0xe1, 0xaa, 0x61, 0x35, 0x50, 0xe7, 0xc6, 0x71, 0xf3, 0x3d, 0x5c, 0xd3, 0x8f, 0x5b,
	0x30, 0x44, 0xcf, 0x5b, 0xce, 0x22, 0x7a, 0x94, 0xc5, 0x5d, 0x28, 0x0a, 0x7f, 0xc4, 0x88, 0x9c,
	0x72, 0x8a, 0xff, 0x31, 0xea, 0xcc, 0x09, 0x35, 0x9b, 0x93, 0x5b, 0xc7, 0x67, 0xd1, 0x54, 0xe2,
	0xba, 0x99, 0xcd, 0xc9, 0x6d, 0x4f, 0xe1, 0xa7, 0x22, 0xb9, 0xf1, 0x47, 0x91, 0x44, 0xcf, 0x21,
	0x43, 0xf8, 0x48, 0xe0, 0x4d, 0xbd, 0xad, 0xb6, 0xd8, 0x16, 0x7f, 0x9e, 0x6c, 0x5d, 0x3e, 0x7c,
	0x01, 0xb5, 0x47, 0x89, 0x43, 0x00, 0xb9, 0xb3, 0x56, 0xaf, 0xdf, 0x3d, 0xad, 0xae, 0xa0, 0x12,
	0xe4, 0x07, 0x97, 0x9d, 0x4e, 0x77, 0x30, 0xa8, 0xa6, 0x14, 0xb8, 0xe8, 0x5a, 0xa7, 0x3d, 0xeb,
	0x4d, 0x75, 0xf5, 0xf0, 0x15, 0xac, 0x2f, 0xdd, 0x28, 0x54, 0x83, 0xb5, 0xce, 0xb9, 0x35, 0xb4,
	0x5b, 0x9d, 0xa1, 0xd3, 0x69, 0xf5, 0xfb, 0xd5, 0x15, 0x54, 0x86, 0xc2, 0xd0, 0x6e, 0x59, 0x83,
	0xb3, 0xae, 0x6d, 0x06, 0x5c, 0x5a, 0xef, 0xac, 0xf3, 0xf7, 0x56, 0x75, 0xb5, 0xdd, 0xfe, 0x7a,
	0xdf, 0x48, 0x7d, 0xbb, 0x6f, 0xa4, 0xbe, 0xdf, 0x37, 0x52, 0x9f, 0x7e, 0x34, 0x56, 0xa0, 0x32,
	0x7f, 0x4a, 0xfd, 0x35, 0x6d, 0x43, 0x5b, 0xc5, 0xf8, 0x42, 0xad, 0x3f, 0xd4, 0x9b, 0x47, 0x62,
	0x4c, 0x38, 0xf5, 0x8e, 0x94, 0x8d, 0xe2, 0xa5, 0xfe, 0xbd, 0xca, 0xe9, 0xc6, 0x93, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x13, 0xd6, 0xdf, 0xf5, 0xab, 0x05, 0x00, 0x00,
}

func (m *CallArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TokenTransfers) > 0 {
		for iNdEx := len(m.TokenTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.TxType != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxFee) > 0 {
		i -= len(m.TxFee)
		copy(dAtA[i:], m.TxFee)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxFee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.TokenTransfers) > 0 {
		for iNdEx := len(m.TokenTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.RawInput) > 0 {
		i -= len(m.RawInput)
		copy(dAtA[i:], m.RawInput)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.RawInput)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.MethodId) > 0 {
		i -= len(m.MethodId)
		copy(dAtA[i:], m.MethodId)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.MethodId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Index != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Nonce != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x78
	}
	if m.Type != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x70
	}
	if m.GasUsed != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x68
	}
	if m.GasLimit != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x60
	}
	if m.GasPrice != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TxFee) > 0 {
		i -= len(m.TxFee)
		copy(dAtA[i:], m.TxFee)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxFee)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ConfirmedAt != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.ConfirmedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTransaction(uint64(m.Status))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TxFee)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTransaction(uint64(m.BlockNumber))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTransaction(uint64(m.Timestamp))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovTransaction(uint64(m.TxType))
	}
	if len(m.TokenTransfers) > 0 {
		for _, e := range m.TokenTransfers {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTransaction(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTransaction(uint64(m.BlockNumber))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTransaction(uint64(m.CreatedAt))
	}
	if m.ConfirmedAt != 0 {
		n += 1 + sovTransaction(uint64(m.ConfirmedAt))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TxFee)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.GasPrice != 0 {
		n += 1 + sovTransaction(uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTransaction(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTransaction(uint64(m.GasUsed))
	}
	if m.Type != 0 {
		n += 1 + sovTransaction(uint64(m.Type))
	}
	if m.Nonce != 0 {
		n += 1 + sovTransaction(uint64(m.Nonce))
	}
	if m.Index != 0 {
		n += 2 + sovTransaction(uint64(m.Index))
	}
	l = len(m.MethodId)
	if l > 0 {
		n += 2 + l + sovTransaction(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 2 + l + sovTransaction(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovTransaction(uint64(l))
	}
	l = len(m.RawInput)
	if l > 0 {
		n += 2 + l + sovTransaction(uint64(l))
	}
	if len(m.TokenTransfers) > 0 {
		for _, e := range m.TokenTransfers {
			l = e.Size()
			n += 2 + l + sovTransaction(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 2 + l + sovTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransfers = append(m.TokenTransfers, &TokenTransfer{})
			if err := m.TokenTransfers[len(m.TokenTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedAt", wireType)
			}
			m.ConfirmedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmedAt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransfers = append(m.TokenTransfers, &TokenTransfer{})
			if err := m.TokenTransfers[len(m.TokenTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &CallArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
