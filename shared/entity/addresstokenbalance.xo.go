package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// AddressTokenBalance represents a row from 'public.address_token_balances'.
type AddressTokenBalance struct {
	ID                       int64           `json:"id"`                          // id
	AddressHash              []byte          `json:"address_hash"`                // address_hash
	BlockNumber              int64           `json:"block_number"`                // block_number
	TokenContractAddressHash []byte          `json:"token_contract_address_hash"` // token_contract_address_hash
	Value                    sql.NullFloat64 `json:"value"`                       // value
	ValueFetchedAt           sql.NullTime    `json:"value_fetched_at"`            // value_fetched_at
	InsertedAt               time.Time       `json:"inserted_at"`                 // inserted_at
	UpdatedAt                time.Time       `json:"updated_at"`                  // updated_at
	TokenID                  sql.NullFloat64 `json:"token_id"`                    // token_id
	TokenType                sql.NullString  `json:"token_type"`                  // token_type
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AddressTokenBalance exists in the database.
func (atb *AddressTokenBalance) Exists() bool {
	return atb._exists
}

// Deleted returns true when the AddressTokenBalance has been marked for deletion from
// the database.
func (atb *AddressTokenBalance) Deleted() bool {
	return atb._deleted
}

// Insert inserts the AddressTokenBalance to the database.
func (atb *AddressTokenBalance) Insert(ctx context.Context, db DB) error {
	switch {
	case atb._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case atb._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.address_token_balances (` +
		`address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType)
	if err := db.QueryRowContext(ctx, sqlstr, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType).Scan(&atb.ID); err != nil {
		return logerror(err)
	}
	// set exists
	atb._exists = true
	return nil
}

// Update updates a AddressTokenBalance in the database.
func (atb *AddressTokenBalance) Update(ctx context.Context, db DB) error {
	switch {
	case !atb._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case atb._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.address_token_balances SET ` +
		`address_hash = $1, block_number = $2, token_contract_address_hash = $3, value = $4, value_fetched_at = $5, inserted_at = $6, updated_at = $7, token_id = $8, token_type = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType, atb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType, atb.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AddressTokenBalance to the database.
func (atb *AddressTokenBalance) Save(ctx context.Context, db DB) error {
	if atb.Exists() {
		return atb.Update(ctx, db)
	}
	return atb.Insert(ctx, db)
}

// Upsert performs an upsert for AddressTokenBalance.
func (atb *AddressTokenBalance) Upsert(ctx context.Context, db DB) error {
	switch {
	case atb._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.address_token_balances (` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`address_hash = EXCLUDED.address_hash, block_number = EXCLUDED.block_number, token_contract_address_hash = EXCLUDED.token_contract_address_hash, value = EXCLUDED.value, value_fetched_at = EXCLUDED.value_fetched_at, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at, token_id = EXCLUDED.token_id, token_type = EXCLUDED.token_type `
	// run
	logf(sqlstr, atb.ID, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType)
	if _, err := db.ExecContext(ctx, sqlstr, atb.ID, atb.AddressHash, atb.BlockNumber, atb.TokenContractAddressHash, atb.Value, atb.ValueFetchedAt, atb.InsertedAt, atb.UpdatedAt, atb.TokenID, atb.TokenType); err != nil {
		return logerror(err)
	}
	// set exists
	atb._exists = true
	return nil
}

// Delete deletes the AddressTokenBalance from the database.
func (atb *AddressTokenBalance) Delete(ctx context.Context, db DB) error {
	switch {
	case !atb._exists: // doesn't exist
		return nil
	case atb._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.address_token_balances ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, atb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, atb.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	atb._deleted = true
	return nil
}

// AddressTokenBalancesByAddressHashTokenContractAddressHashBlockNumber retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'address_token_balances_address_hash_token_contract_address_hash'.
func AddressTokenBalancesByAddressHashTokenContractAddressHashBlockNumber(ctx context.Context, db DB, addressHash, tokenContractAddressHash []byte, blockNumber int64) ([]*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE address_hash = $1 AND token_contract_address_hash = $2 AND block_number = $3`
	// run
	logf(sqlstr, addressHash, tokenContractAddressHash, blockNumber)
	rows, err := db.QueryContext(ctx, sqlstr, addressHash, tokenContractAddressHash, blockNumber)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AddressTokenBalance
	for rows.Next() {
		atb := AddressTokenBalance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &atb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AddressTokenBalancesByBlockNumberAddressHash retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'address_token_balances_block_number_address_hash_index'.
func AddressTokenBalancesByBlockNumberAddressHash(ctx context.Context, db DB, blockNumber int64, addressHash []byte) ([]*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE block_number = $1 AND address_hash = $2`
	// run
	logf(sqlstr, blockNumber, addressHash)
	rows, err := db.QueryContext(ctx, sqlstr, blockNumber, addressHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AddressTokenBalance
	for rows.Next() {
		atb := AddressTokenBalance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &atb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AddressTokenBalanceByID retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'address_token_balances_pkey'.
func AddressTokenBalanceByID(ctx context.Context, db DB, id int64) (*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	atb := AddressTokenBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
		return nil, logerror(err)
	}
	return &atb, nil
}

// AddressTokenBalancesByTokenContractAddressHash retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'address_token_balances_token_contract_address_hash_index'.
func AddressTokenBalancesByTokenContractAddressHash(ctx context.Context, db DB, tokenContractAddressHash []byte) ([]*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE token_contract_address_hash = $1`
	// run
	logf(sqlstr, tokenContractAddressHash)
	rows, err := db.QueryContext(ctx, sqlstr, tokenContractAddressHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AddressTokenBalance
	for rows.Next() {
		atb := AddressTokenBalance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &atb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AddressTokenBalancesByTokenID retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'address_token_balances_token_id_index'.
func AddressTokenBalancesByTokenID(ctx context.Context, db DB, tokenID sql.NullFloat64) ([]*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE token_id = $1`
	// run
	logf(sqlstr, tokenID)
	rows, err := db.QueryContext(ctx, sqlstr, tokenID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AddressTokenBalance
	for rows.Next() {
		atb := AddressTokenBalance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &atb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AddressTokenBalanceByAddressHashTokenContractAddressHashBlockNumber retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'unfetched_token_balances'.
func AddressTokenBalanceByAddressHashTokenContractAddressHashBlockNumber(ctx context.Context, db DB, addressHash, tokenContractAddressHash []byte, blockNumber int64) (*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE address_hash = $1 AND token_contract_address_hash = $2 AND block_number = $3`
	// run
	logf(sqlstr, addressHash, tokenContractAddressHash, blockNumber)
	atb := AddressTokenBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, addressHash, tokenContractAddressHash, blockNumber).Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
		return nil, logerror(err)
	}
	return &atb, nil
}

// AddressTokenBalanceByAddressHashTokenContractAddressHashTokenIDBlockNumber retrieves a row from 'public.address_token_balances' as a AddressTokenBalance.
//
// Generated from index 'unfetched_token_balances_with_token_id'.
func AddressTokenBalanceByAddressHashTokenContractAddressHashTokenIDBlockNumber(ctx context.Context, db DB, addressHash, tokenContractAddressHash []byte, tokenID sql.NullFloat64, blockNumber int64) (*AddressTokenBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, address_hash, block_number, token_contract_address_hash, value, value_fetched_at, inserted_at, updated_at, token_id, token_type ` +
		`FROM public.address_token_balances ` +
		`WHERE address_hash = $1 AND token_contract_address_hash = $2 AND token_id = $3 AND block_number = $4`
	// run
	logf(sqlstr, addressHash, tokenContractAddressHash, tokenID, blockNumber)
	atb := AddressTokenBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, addressHash, tokenContractAddressHash, tokenID, blockNumber).Scan(&atb.ID, &atb.AddressHash, &atb.BlockNumber, &atb.TokenContractAddressHash, &atb.Value, &atb.ValueFetchedAt, &atb.InsertedAt, &atb.UpdatedAt, &atb.TokenID, &atb.TokenType); err != nil {
		return nil, logerror(err)
	}
	return &atb, nil
}

// Address returns the Address associated with the AddressTokenBalance's (AddressHash).
//
// Generated from foreign key 'address_token_balances_address_hash_fkey'.
func (atb *AddressTokenBalance) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByHash(ctx, db, atb.AddressHash)
}

// Token returns the Token associated with the AddressTokenBalance's (TokenContractAddressHash).
//
// Generated from foreign key 'address_token_balances_token_contract_address_hash_fkey'.
func (atb *AddressTokenBalance) Token(ctx context.Context, db DB) (*Token, error) {
	return TokenByContractAddressHash(ctx, db, atb.TokenContractAddressHash)
}
