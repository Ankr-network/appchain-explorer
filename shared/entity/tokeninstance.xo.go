package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// TokenInstance represents a row from 'public.token_instances'.
type TokenInstance struct {
	TokenID                  float64        `json:"token_id"`                    // token_id
	TokenContractAddressHash []byte         `json:"token_contract_address_hash"` // token_contract_address_hash
	Metadata                 []byte         `json:"metadata"`                    // metadata
	InsertedAt               time.Time      `json:"inserted_at"`                 // inserted_at
	UpdatedAt                time.Time      `json:"updated_at"`                  // updated_at
	Error                    sql.NullString `json:"error"`                       // error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the TokenInstance exists in the database.
func (ti *TokenInstance) Exists() bool {
	return ti._exists
}

// Deleted returns true when the TokenInstance has been marked for deletion from
// the database.
func (ti *TokenInstance) Deleted() bool {
	return ti._deleted
}

// Insert inserts the TokenInstance to the database.
func (ti *TokenInstance) Insert(ctx context.Context, db DB) error {
	switch {
	case ti._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ti._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.token_instances (` +
		`token_id, token_contract_address_hash, metadata, inserted_at, updated_at, error` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, ti.TokenID, ti.TokenContractAddressHash, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error)
	if _, err := db.ExecContext(ctx, sqlstr, ti.TokenID, ti.TokenContractAddressHash, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error); err != nil {
		return logerror(err)
	}
	// set exists
	ti._exists = true
	return nil
}

// Update updates a TokenInstance in the database.
func (ti *TokenInstance) Update(ctx context.Context, db DB) error {
	switch {
	case !ti._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ti._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.token_instances SET ` +
		`metadata = $1, inserted_at = $2, updated_at = $3, error = $4 ` +
		`WHERE token_id = $5 AND token_contract_address_hash = $6`
	// run
	logf(sqlstr, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error, ti.TokenID, ti.TokenContractAddressHash)
	if _, err := db.ExecContext(ctx, sqlstr, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error, ti.TokenID, ti.TokenContractAddressHash); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the TokenInstance to the database.
func (ti *TokenInstance) Save(ctx context.Context, db DB) error {
	if ti.Exists() {
		return ti.Update(ctx, db)
	}
	return ti.Insert(ctx, db)
}

// Upsert performs an upsert for TokenInstance.
func (ti *TokenInstance) Upsert(ctx context.Context, db DB) error {
	switch {
	case ti._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.token_instances (` +
		`token_id, token_contract_address_hash, metadata, inserted_at, updated_at, error` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (token_id, token_contract_address_hash) DO ` +
		`UPDATE SET ` +
		`metadata = EXCLUDED.metadata, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at, error = EXCLUDED.error `
	// run
	logf(sqlstr, ti.TokenID, ti.TokenContractAddressHash, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error)
	if _, err := db.ExecContext(ctx, sqlstr, ti.TokenID, ti.TokenContractAddressHash, ti.Metadata, ti.InsertedAt, ti.UpdatedAt, ti.Error); err != nil {
		return logerror(err)
	}
	// set exists
	ti._exists = true
	return nil
}

// Delete deletes the TokenInstance from the database.
func (ti *TokenInstance) Delete(ctx context.Context, db DB) error {
	switch {
	case !ti._exists: // doesn't exist
		return nil
	case ti._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.token_instances ` +
		`WHERE token_id = $1 AND token_contract_address_hash = $2`
	// run
	logf(sqlstr, ti.TokenID, ti.TokenContractAddressHash)
	if _, err := db.ExecContext(ctx, sqlstr, ti.TokenID, ti.TokenContractAddressHash); err != nil {
		return logerror(err)
	}
	// set deleted
	ti._deleted = true
	return nil
}

// TokenInstancesByError retrieves a row from 'public.token_instances' as a TokenInstance.
//
// Generated from index 'token_instances_error_index'.
func TokenInstancesByError(ctx context.Context, db DB, e sql.NullString) ([]*TokenInstance, error) {
	// query
	const sqlstr = `SELECT ` +
		`token_id, token_contract_address_hash, metadata, inserted_at, updated_at, error ` +
		`FROM public.token_instances ` +
		`WHERE error = $1`
	// run
	logf(sqlstr, e)
	rows, err := db.QueryContext(ctx, sqlstr, e)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*TokenInstance
	for rows.Next() {
		ti := TokenInstance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ti.TokenID, &ti.TokenContractAddressHash, &ti.Metadata, &ti.InsertedAt, &ti.UpdatedAt, &ti.Error); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ti)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TokenInstanceByTokenIDTokenContractAddressHash retrieves a row from 'public.token_instances' as a TokenInstance.
//
// Generated from index 'token_instances_pkey'.
func TokenInstanceByTokenIDTokenContractAddressHash(ctx context.Context, db DB, tokenID float64, tokenContractAddressHash []byte) (*TokenInstance, error) {
	// query
	const sqlstr = `SELECT ` +
		`token_id, token_contract_address_hash, metadata, inserted_at, updated_at, error ` +
		`FROM public.token_instances ` +
		`WHERE token_id = $1 AND token_contract_address_hash = $2`
	// run
	logf(sqlstr, tokenID, tokenContractAddressHash)
	ti := TokenInstance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, tokenID, tokenContractAddressHash).Scan(&ti.TokenID, &ti.TokenContractAddressHash, &ti.Metadata, &ti.InsertedAt, &ti.UpdatedAt, &ti.Error); err != nil {
		return nil, logerror(err)
	}
	return &ti, nil
}

// Token returns the Token associated with the TokenInstance's (TokenContractAddressHash).
//
// Generated from foreign key 'token_instances_token_contract_address_hash_fkey'.
func (ti *TokenInstance) Token(ctx context.Context, db DB) (*Token, error) {
	return TokenByContractAddressHash(ctx, db, ti.TokenContractAddressHash)
}
