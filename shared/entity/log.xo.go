package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Log represents a row from 'public.logs'.
type Log struct {
	Data            []byte         `json:"data"`             // data
	Index           int            `json:"index"`            // index
	Type            sql.NullString `json:"type"`             // type
	FirstTopic      sql.NullString `json:"first_topic"`      // first_topic
	SecondTopic     sql.NullString `json:"second_topic"`     // second_topic
	ThirdTopic      sql.NullString `json:"third_topic"`      // third_topic
	FourthTopic     sql.NullString `json:"fourth_topic"`     // fourth_topic
	InsertedAt      time.Time      `json:"inserted_at"`      // inserted_at
	UpdatedAt       time.Time      `json:"updated_at"`       // updated_at
	AddressHash     []byte         `json:"address_hash"`     // address_hash
	TransactionHash []byte         `json:"transaction_hash"` // transaction_hash
	BlockHash       []byte         `json:"block_hash"`       // block_hash
	BlockNumber     sql.NullInt64  `json:"block_number"`     // block_number
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Log exists in the database.
func (l *Log) Exists() bool {
	return l._exists
}

// Deleted returns true when the Log has been marked for deletion from
// the database.
func (l *Log) Deleted() bool {
	return l._deleted
}

// Insert inserts the Log to the database.
func (l *Log) Insert(ctx context.Context, db DB) error {
	switch {
	case l._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case l._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.logs (` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, l.Data, l.Index, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.TransactionHash, l.BlockHash, l.BlockNumber)
	if _, err := db.ExecContext(ctx, sqlstr, l.Data, l.Index, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.TransactionHash, l.BlockHash, l.BlockNumber); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Update updates a Log in the database.
func (l *Log) Update(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case l._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.logs SET ` +
		`data = $1, type = $2, first_topic = $3, second_topic = $4, third_topic = $5, fourth_topic = $6, inserted_at = $7, updated_at = $8, address_hash = $9, block_number = $10 ` +
		`WHERE index = $11 AND transaction_hash = $12 AND block_hash = $13`
	// run
	logf(sqlstr, l.Data, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.BlockNumber, l.Index, l.TransactionHash, l.BlockHash)
	if _, err := db.ExecContext(ctx, sqlstr, l.Data, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.BlockNumber, l.Index, l.TransactionHash, l.BlockHash); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Log to the database.
func (l *Log) Save(ctx context.Context, db DB) error {
	if l.Exists() {
		return l.Update(ctx, db)
	}
	return l.Insert(ctx, db)
}

// Upsert performs an upsert for Log.
func (l *Log) Upsert(ctx context.Context, db DB) error {
	switch {
	case l._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.logs (` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (index, transaction_hash, block_hash) DO ` +
		`UPDATE SET ` +
		`data = EXCLUDED.data, type = EXCLUDED.type, first_topic = EXCLUDED.first_topic, second_topic = EXCLUDED.second_topic, third_topic = EXCLUDED.third_topic, fourth_topic = EXCLUDED.fourth_topic, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at, address_hash = EXCLUDED.address_hash, block_number = EXCLUDED.block_number `
	// run
	logf(sqlstr, l.Data, l.Index, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.TransactionHash, l.BlockHash, l.BlockNumber)
	if _, err := db.ExecContext(ctx, sqlstr, l.Data, l.Index, l.Type, l.FirstTopic, l.SecondTopic, l.ThirdTopic, l.FourthTopic, l.InsertedAt, l.UpdatedAt, l.AddressHash, l.TransactionHash, l.BlockHash, l.BlockNumber); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Delete deletes the Log from the database.
func (l *Log) Delete(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return nil
	case l._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.logs ` +
		`WHERE index = $1 AND transaction_hash = $2 AND block_hash = $3`
	// run
	logf(sqlstr, l.Index, l.TransactionHash, l.BlockHash)
	if _, err := db.ExecContext(ctx, sqlstr, l.Index, l.TransactionHash, l.BlockHash); err != nil {
		return logerror(err)
	}
	// set deleted
	l._deleted = true
	return nil
}

// LogsByAddressHash retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_address_hash_index'.
func LogsByAddressHash(ctx context.Context, db DB, addressHash []byte) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE address_hash = $1`
	// run
	logf(sqlstr, addressHash)
	rows, err := db.QueryContext(ctx, sqlstr, addressHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByAddressHashTransactionHash retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_address_hash_transaction_hash_index'.
func LogsByAddressHashTransactionHash(ctx context.Context, db DB, addressHash, transactionHash []byte) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE address_hash = $1 AND transaction_hash = $2`
	// run
	logf(sqlstr, addressHash, transactionHash)
	rows, err := db.QueryContext(ctx, sqlstr, addressHash, transactionHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByBlockNumberIndex retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_block_number_DESC__index_DESC_index'.
func LogsByBlockNumberIndex(ctx context.Context, db DB, blockNumber sql.NullInt64, index int) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE block_number = $1 AND index = $2`
	// run
	logf(sqlstr, blockNumber, index)
	rows, err := db.QueryContext(ctx, sqlstr, blockNumber, index)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByFirstTopic retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_first_topic_index'.
func LogsByFirstTopic(ctx context.Context, db DB, firstTopic sql.NullString) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE first_topic = $1`
	// run
	logf(sqlstr, firstTopic)
	rows, err := db.QueryContext(ctx, sqlstr, firstTopic)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByFourthTopic retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_fourth_topic_index'.
func LogsByFourthTopic(ctx context.Context, db DB, fourthTopic sql.NullString) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE fourth_topic = $1`
	// run
	logf(sqlstr, fourthTopic)
	rows, err := db.QueryContext(ctx, sqlstr, fourthTopic)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByIndex retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_index_index'.
func LogsByIndex(ctx context.Context, db DB, index int) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE index = $1`
	// run
	logf(sqlstr, index)
	rows, err := db.QueryContext(ctx, sqlstr, index)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogByTransactionHashBlockHashIndex retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_pkey'.
func LogByTransactionHashBlockHashIndex(ctx context.Context, db DB, transactionHash, blockHash []byte, index int) (*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE transaction_hash = $1 AND block_hash = $2 AND index = $3`
	// run
	logf(sqlstr, transactionHash, blockHash, index)
	l := Log{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, transactionHash, blockHash, index).Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
		return nil, logerror(err)
	}
	return &l, nil
}

// LogsBySecondTopic retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_second_topic_index'.
func LogsBySecondTopic(ctx context.Context, db DB, secondTopic sql.NullString) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE second_topic = $1`
	// run
	logf(sqlstr, secondTopic)
	rows, err := db.QueryContext(ctx, sqlstr, secondTopic)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByThirdTopic retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_third_topic_index'.
func LogsByThirdTopic(ctx context.Context, db DB, thirdTopic sql.NullString) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE third_topic = $1`
	// run
	logf(sqlstr, thirdTopic)
	rows, err := db.QueryContext(ctx, sqlstr, thirdTopic)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByTransactionHashIndex retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_transaction_hash_index_index'.
func LogsByTransactionHashIndex(ctx context.Context, db DB, transactionHash []byte, index int) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE transaction_hash = $1 AND index = $2`
	// run
	logf(sqlstr, transactionHash, index)
	rows, err := db.QueryContext(ctx, sqlstr, transactionHash, index)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// LogsByType retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_type_index'.
func LogsByType(ctx context.Context, db DB, typ sql.NullString) ([]*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`data, index, type, first_topic, second_topic, third_topic, fourth_topic, inserted_at, updated_at, address_hash, transaction_hash, block_hash, block_number ` +
		`FROM public.logs ` +
		`WHERE type = $1`
	// run
	logf(sqlstr, typ)
	rows, err := db.QueryContext(ctx, sqlstr, typ)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Log
	for rows.Next() {
		l := Log{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&l.Data, &l.Index, &l.Type, &l.FirstTopic, &l.SecondTopic, &l.ThirdTopic, &l.FourthTopic, &l.InsertedAt, &l.UpdatedAt, &l.AddressHash, &l.TransactionHash, &l.BlockHash, &l.BlockNumber); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &l)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Address returns the Address associated with the Log's (AddressHash).
//
// Generated from foreign key 'logs_address_hash_fkey'.
func (l *Log) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByHash(ctx, db, l.AddressHash)
}

// Block returns the Block associated with the Log's (BlockHash).
//
// Generated from foreign key 'logs_block_hash_fkey'.
func (l *Log) Block(ctx context.Context, db DB) (*Block, error) {
	return BlockByHash(ctx, db, l.BlockHash)
}

// Transaction returns the Transaction associated with the Log's (TransactionHash).
//
// Generated from foreign key 'logs_transaction_hash_fkey'.
func (l *Log) Transaction(ctx context.Context, db DB) (*Transaction, error) {
	return TransactionByHash(ctx, db, l.TransactionHash)
}
