package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// TransactionFork represents a row from 'public.transaction_forks'.
type TransactionFork struct {
	Hash       []byte    `json:"hash"`        // hash
	Index      int       `json:"index"`       // index
	UncleHash  []byte    `json:"uncle_hash"`  // uncle_hash
	InsertedAt time.Time `json:"inserted_at"` // inserted_at
	UpdatedAt  time.Time `json:"updated_at"`  // updated_at
}

// TransactionForkByUncleHashIndex retrieves a row from 'public.transaction_forks' as a TransactionFork.
//
// Generated from index 'transaction_forks_uncle_hash_index_index'.
func TransactionForkByUncleHashIndex(ctx context.Context, db DB, uncleHash []byte, index int) (*TransactionFork, error) {
	// query
	const sqlstr = `SELECT ` +
		`hash, index, uncle_hash, inserted_at, updated_at ` +
		`FROM public.transaction_forks ` +
		`WHERE uncle_hash = $1 AND index = $2`
	// run
	logf(sqlstr, uncleHash, index)
	tf := TransactionFork{}
	if err := db.QueryRowContext(ctx, sqlstr, uncleHash, index).Scan(&tf.Hash, &tf.Index, &tf.UncleHash, &tf.InsertedAt, &tf.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &tf, nil
}

// Transaction returns the Transaction associated with the TransactionFork's (Hash).
//
// Generated from foreign key 'transaction_forks_hash_fkey'.
func (tf *TransactionFork) Transaction(ctx context.Context, db DB) (*Transaction, error) {
	return TransactionByHash(ctx, db, tf.Hash)
}

// Block returns the Block associated with the TransactionFork's (UncleHash).
//
// Generated from foreign key 'transaction_forks_uncle_hash_fkey'.
func (tf *TransactionFork) Block(ctx context.Context, db DB) (*Block, error) {
	return BlockByHash(ctx, db, tf.UncleHash)
}
