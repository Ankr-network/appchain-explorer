package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// AddressCoinBalancesDaily represents a row from 'public.address_coin_balances_daily'.
type AddressCoinBalancesDaily struct {
	AddressHash []byte          `json:"address_hash"` // address_hash
	Day         time.Time       `json:"day"`          // day
	Value       sql.NullFloat64 `json:"value"`        // value
	InsertedAt  time.Time       `json:"inserted_at"`  // inserted_at
	UpdatedAt   time.Time       `json:"updated_at"`   // updated_at
}

// AddressCoinBalancesDailyByAddressHashDay retrieves a row from 'public.address_coin_balances_daily' as a AddressCoinBalancesDaily.
//
// Generated from index 'address_coin_balances_daily_address_hash_day_index'.
func AddressCoinBalancesDailyByAddressHashDay(ctx context.Context, db DB, addressHash []byte, day time.Time) (*AddressCoinBalancesDaily, error) {
	// query
	const sqlstr = `SELECT ` +
		`address_hash, day, value, inserted_at, updated_at ` +
		`FROM public.address_coin_balances_daily ` +
		`WHERE address_hash = $1 AND day = $2`
	// run
	logf(sqlstr, addressHash, day)
	acbd := AddressCoinBalancesDaily{}
	if err := db.QueryRowContext(ctx, sqlstr, addressHash, day).Scan(&acbd.AddressHash, &acbd.Day, &acbd.Value, &acbd.InsertedAt, &acbd.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &acbd, nil
}

// Address returns the Address associated with the AddressCoinBalancesDaily's (AddressHash).
//
// Generated from foreign key 'address_coin_balances_daily_address_hash_fkey'.
func (acbd *AddressCoinBalancesDaily) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByHash(ctx, db, acbd.AddressHash)
}
