package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// SmartContractsAdditionalSource represents a row from 'public.smart_contracts_additional_sources'.
type SmartContractsAdditionalSource struct {
	ID                 int64     `json:"id"`                   // id
	FileName           string    `json:"file_name"`            // file_name
	ContractSourceCode string    `json:"contract_source_code"` // contract_source_code
	AddressHash        []byte    `json:"address_hash"`         // address_hash
	InsertedAt         time.Time `json:"inserted_at"`          // inserted_at
	UpdatedAt          time.Time `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the SmartContractsAdditionalSource exists in the database.
func (scas *SmartContractsAdditionalSource) Exists() bool {
	return scas._exists
}

// Deleted returns true when the SmartContractsAdditionalSource has been marked for deletion from
// the database.
func (scas *SmartContractsAdditionalSource) Deleted() bool {
	return scas._deleted
}

// Insert inserts the SmartContractsAdditionalSource to the database.
func (scas *SmartContractsAdditionalSource) Insert(ctx context.Context, db DB) error {
	switch {
	case scas._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case scas._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.smart_contracts_additional_sources (` +
		`file_name, contract_source_code, address_hash, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt).Scan(&scas.ID); err != nil {
		return logerror(err)
	}
	// set exists
	scas._exists = true
	return nil
}

// Update updates a SmartContractsAdditionalSource in the database.
func (scas *SmartContractsAdditionalSource) Update(ctx context.Context, db DB) error {
	switch {
	case !scas._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case scas._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.smart_contracts_additional_sources SET ` +
		`file_name = $1, contract_source_code = $2, address_hash = $3, inserted_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt, scas.ID)
	if _, err := db.ExecContext(ctx, sqlstr, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt, scas.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the SmartContractsAdditionalSource to the database.
func (scas *SmartContractsAdditionalSource) Save(ctx context.Context, db DB) error {
	if scas.Exists() {
		return scas.Update(ctx, db)
	}
	return scas.Insert(ctx, db)
}

// Upsert performs an upsert for SmartContractsAdditionalSource.
func (scas *SmartContractsAdditionalSource) Upsert(ctx context.Context, db DB) error {
	switch {
	case scas._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.smart_contracts_additional_sources (` +
		`id, file_name, contract_source_code, address_hash, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`file_name = EXCLUDED.file_name, contract_source_code = EXCLUDED.contract_source_code, address_hash = EXCLUDED.address_hash, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, scas.ID, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, scas.ID, scas.FileName, scas.ContractSourceCode, scas.AddressHash, scas.InsertedAt, scas.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	scas._exists = true
	return nil
}

// Delete deletes the SmartContractsAdditionalSource from the database.
func (scas *SmartContractsAdditionalSource) Delete(ctx context.Context, db DB) error {
	switch {
	case !scas._exists: // doesn't exist
		return nil
	case scas._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.smart_contracts_additional_sources ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, scas.ID)
	if _, err := db.ExecContext(ctx, sqlstr, scas.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	scas._deleted = true
	return nil
}

// SmartContractsAdditionalSourcesByAddressHash retrieves a row from 'public.smart_contracts_additional_sources' as a SmartContractsAdditionalSource.
//
// Generated from index 'smart_contracts_additional_sources_address_hash_index'.
func SmartContractsAdditionalSourcesByAddressHash(ctx context.Context, db DB, addressHash []byte) ([]*SmartContractsAdditionalSource, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, file_name, contract_source_code, address_hash, inserted_at, updated_at ` +
		`FROM public.smart_contracts_additional_sources ` +
		`WHERE address_hash = $1`
	// run
	logf(sqlstr, addressHash)
	rows, err := db.QueryContext(ctx, sqlstr, addressHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SmartContractsAdditionalSource
	for rows.Next() {
		scas := SmartContractsAdditionalSource{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&scas.ID, &scas.FileName, &scas.ContractSourceCode, &scas.AddressHash, &scas.InsertedAt, &scas.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &scas)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SmartContractsAdditionalSourceByID retrieves a row from 'public.smart_contracts_additional_sources' as a SmartContractsAdditionalSource.
//
// Generated from index 'smart_contracts_additional_sources_pkey'.
func SmartContractsAdditionalSourceByID(ctx context.Context, db DB, id int64) (*SmartContractsAdditionalSource, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, file_name, contract_source_code, address_hash, inserted_at, updated_at ` +
		`FROM public.smart_contracts_additional_sources ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	scas := SmartContractsAdditionalSource{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&scas.ID, &scas.FileName, &scas.ContractSourceCode, &scas.AddressHash, &scas.InsertedAt, &scas.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &scas, nil
}

// SmartContract returns the SmartContract associated with the SmartContractsAdditionalSource's (AddressHash).
//
// Generated from foreign key 'smart_contracts_additional_sources_address_hash_fkey'.
func (scas *SmartContractsAdditionalSource) SmartContract(ctx context.Context, db DB) (*SmartContract, error) {
	return SmartContractByAddressHash(ctx, db, scas.AddressHash)
}
