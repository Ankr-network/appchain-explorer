package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// ContractMethod represents a row from 'public.contract_methods'.
type ContractMethod struct {
	ID         int64     `json:"id"`          // id
	Identifier int       `json:"identifier"`  // identifier
	Abi        []byte    `json:"abi"`         // abi
	Type       string    `json:"type"`        // type
	InsertedAt time.Time `json:"inserted_at"` // inserted_at
	UpdatedAt  time.Time `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ContractMethod exists in the database.
func (cm *ContractMethod) Exists() bool {
	return cm._exists
}

// Deleted returns true when the ContractMethod has been marked for deletion from
// the database.
func (cm *ContractMethod) Deleted() bool {
	return cm._deleted
}

// Insert inserts the ContractMethod to the database.
func (cm *ContractMethod) Insert(ctx context.Context, db DB) error {
	switch {
	case cm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.contract_methods (` +
		`identifier, abi, type, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt).Scan(&cm.ID); err != nil {
		return logerror(err)
	}
	// set exists
	cm._exists = true
	return nil
}

// Update updates a ContractMethod in the database.
func (cm *ContractMethod) Update(ctx context.Context, db DB) error {
	switch {
	case !cm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.contract_methods SET ` +
		`identifier = $1, abi = $2, type = $3, inserted_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt, cm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt, cm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ContractMethod to the database.
func (cm *ContractMethod) Save(ctx context.Context, db DB) error {
	if cm.Exists() {
		return cm.Update(ctx, db)
	}
	return cm.Insert(ctx, db)
}

// Upsert performs an upsert for ContractMethod.
func (cm *ContractMethod) Upsert(ctx context.Context, db DB) error {
	switch {
	case cm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.contract_methods (` +
		`id, identifier, abi, type, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`identifier = EXCLUDED.identifier, abi = EXCLUDED.abi, type = EXCLUDED.type, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, cm.ID, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cm.ID, cm.Identifier, cm.Abi, cm.Type, cm.InsertedAt, cm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cm._exists = true
	return nil
}

// Delete deletes the ContractMethod from the database.
func (cm *ContractMethod) Delete(ctx context.Context, db DB) error {
	switch {
	case !cm._exists: // doesn't exist
		return nil
	case cm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.contract_methods ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, cm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cm._deleted = true
	return nil
}

// ContractMethodByIdentifierAbi retrieves a row from 'public.contract_methods' as a ContractMethod.
//
// Generated from index 'contract_methods_identifier_abi_index'.
func ContractMethodByIdentifierAbi(ctx context.Context, db DB, identifier int, abi []byte) (*ContractMethod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, identifier, abi, type, inserted_at, updated_at ` +
		`FROM public.contract_methods ` +
		`WHERE identifier = $1 AND abi = $2`
	// run
	logf(sqlstr, identifier, abi)
	cm := ContractMethod{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, identifier, abi).Scan(&cm.ID, &cm.Identifier, &cm.Abi, &cm.Type, &cm.InsertedAt, &cm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cm, nil
}

// ContractMethodByID retrieves a row from 'public.contract_methods' as a ContractMethod.
//
// Generated from index 'contract_methods_pkey'.
func ContractMethodByID(ctx context.Context, db DB, id int64) (*ContractMethod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, identifier, abi, type, inserted_at, updated_at ` +
		`FROM public.contract_methods ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	cm := ContractMethod{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cm.ID, &cm.Identifier, &cm.Abi, &cm.Type, &cm.InsertedAt, &cm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cm, nil
}

// ContractMethodsByIdentifier runs a custom query, returning results as ContractMethod.
func ContractMethodsByIdentifier(ctx context.Context, db DB, identifier int32) ([]*ContractMethod, error) {
	// query
	const sqlstr = `SELECT * FROM "contract_methods" ` +
		`WHERE identifier = $1`
	// run
	logf(sqlstr, identifier)
	rows, err := db.QueryContext(ctx, sqlstr, identifier)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ContractMethod
	for rows.Next() {
		var cm ContractMethod
		// scan
		if err := rows.Scan(&cm.ID, &cm.Identifier, &cm.Abi, &cm.Type, &cm.InsertedAt, &cm.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cm)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
