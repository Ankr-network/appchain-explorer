package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// PendingBlockOperation represents a row from 'public.pending_block_operations'.
type PendingBlockOperation struct {
	BlockHash                 []byte    `json:"block_hash"`                  // block_hash
	InsertedAt                time.Time `json:"inserted_at"`                 // inserted_at
	UpdatedAt                 time.Time `json:"updated_at"`                  // updated_at
	FetchInternalTransactions bool      `json:"fetch_internal_transactions"` // fetch_internal_transactions
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the PendingBlockOperation exists in the database.
func (pbo *PendingBlockOperation) Exists() bool {
	return pbo._exists
}

// Deleted returns true when the PendingBlockOperation has been marked for deletion from
// the database.
func (pbo *PendingBlockOperation) Deleted() bool {
	return pbo._deleted
}

// Insert inserts the PendingBlockOperation to the database.
func (pbo *PendingBlockOperation) Insert(ctx context.Context, db DB) error {
	switch {
	case pbo._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pbo._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.pending_block_operations (` +
		`block_hash, inserted_at, updated_at, fetch_internal_transactions` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, pbo.BlockHash, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions)
	if _, err := db.ExecContext(ctx, sqlstr, pbo.BlockHash, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions); err != nil {
		return logerror(err)
	}
	// set exists
	pbo._exists = true
	return nil
}

// Update updates a PendingBlockOperation in the database.
func (pbo *PendingBlockOperation) Update(ctx context.Context, db DB) error {
	switch {
	case !pbo._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pbo._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.pending_block_operations SET ` +
		`inserted_at = $1, updated_at = $2, fetch_internal_transactions = $3 ` +
		`WHERE block_hash = $4`
	// run
	logf(sqlstr, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions, pbo.BlockHash)
	if _, err := db.ExecContext(ctx, sqlstr, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions, pbo.BlockHash); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the PendingBlockOperation to the database.
func (pbo *PendingBlockOperation) Save(ctx context.Context, db DB) error {
	if pbo.Exists() {
		return pbo.Update(ctx, db)
	}
	return pbo.Insert(ctx, db)
}

// Upsert performs an upsert for PendingBlockOperation.
func (pbo *PendingBlockOperation) Upsert(ctx context.Context, db DB) error {
	switch {
	case pbo._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.pending_block_operations (` +
		`block_hash, inserted_at, updated_at, fetch_internal_transactions` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (block_hash) DO ` +
		`UPDATE SET ` +
		`inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at, fetch_internal_transactions = EXCLUDED.fetch_internal_transactions `
	// run
	logf(sqlstr, pbo.BlockHash, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions)
	if _, err := db.ExecContext(ctx, sqlstr, pbo.BlockHash, pbo.InsertedAt, pbo.UpdatedAt, pbo.FetchInternalTransactions); err != nil {
		return logerror(err)
	}
	// set exists
	pbo._exists = true
	return nil
}

// Delete deletes the PendingBlockOperation from the database.
func (pbo *PendingBlockOperation) Delete(ctx context.Context, db DB) error {
	switch {
	case !pbo._exists: // doesn't exist
		return nil
	case pbo._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.pending_block_operations ` +
		`WHERE block_hash = $1`
	// run
	logf(sqlstr, pbo.BlockHash)
	if _, err := db.ExecContext(ctx, sqlstr, pbo.BlockHash); err != nil {
		return logerror(err)
	}
	// set deleted
	pbo._deleted = true
	return nil
}

// PendingBlockOperationsByBlockHash retrieves a row from 'public.pending_block_operations' as a PendingBlockOperation.
//
// Generated from index 'pending_block_operations_block_hash_index_partial'.
func PendingBlockOperationsByBlockHash(ctx context.Context, db DB, blockHash []byte) ([]*PendingBlockOperation, error) {
	// query
	const sqlstr = `SELECT ` +
		`block_hash, inserted_at, updated_at, fetch_internal_transactions ` +
		`FROM public.pending_block_operations ` +
		`WHERE block_hash = $1`
	// run
	logf(sqlstr, blockHash)
	rows, err := db.QueryContext(ctx, sqlstr, blockHash)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PendingBlockOperation
	for rows.Next() {
		pbo := PendingBlockOperation{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pbo.BlockHash, &pbo.InsertedAt, &pbo.UpdatedAt, &pbo.FetchInternalTransactions); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pbo)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PendingBlockOperationByBlockHash retrieves a row from 'public.pending_block_operations' as a PendingBlockOperation.
//
// Generated from index 'pending_block_operations_pkey'.
func PendingBlockOperationByBlockHash(ctx context.Context, db DB, blockHash []byte) (*PendingBlockOperation, error) {
	// query
	const sqlstr = `SELECT ` +
		`block_hash, inserted_at, updated_at, fetch_internal_transactions ` +
		`FROM public.pending_block_operations ` +
		`WHERE block_hash = $1`
	// run
	logf(sqlstr, blockHash)
	pbo := PendingBlockOperation{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, blockHash).Scan(&pbo.BlockHash, &pbo.InsertedAt, &pbo.UpdatedAt, &pbo.FetchInternalTransactions); err != nil {
		return nil, logerror(err)
	}
	return &pbo, nil
}

// Block returns the Block associated with the PendingBlockOperation's (BlockHash).
//
// Generated from foreign key 'pending_block_operations_block_hash_fkey'.
func (pbo *PendingBlockOperation) Block(ctx context.Context, db DB) (*Block, error) {
	return BlockByHash(ctx, db, pbo.BlockHash)
}
