package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// MarketHistory represents a row from 'public.market_history'.
type MarketHistory struct {
	ID           int64           `json:"id"`            // id
	Date         sql.NullTime    `json:"date"`          // date
	ClosingPrice sql.NullFloat64 `json:"closing_price"` // closing_price
	OpeningPrice sql.NullFloat64 `json:"opening_price"` // opening_price
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the MarketHistory exists in the database.
func (mh *MarketHistory) Exists() bool {
	return mh._exists
}

// Deleted returns true when the MarketHistory has been marked for deletion from
// the database.
func (mh *MarketHistory) Deleted() bool {
	return mh._deleted
}

// Insert inserts the MarketHistory to the database.
func (mh *MarketHistory) Insert(ctx context.Context, db DB) error {
	switch {
	case mh._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case mh._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.market_history (` +
		`date, closing_price, opening_price` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, mh.Date, mh.ClosingPrice, mh.OpeningPrice)
	if err := db.QueryRowContext(ctx, sqlstr, mh.Date, mh.ClosingPrice, mh.OpeningPrice).Scan(&mh.ID); err != nil {
		return logerror(err)
	}
	// set exists
	mh._exists = true
	return nil
}

// Update updates a MarketHistory in the database.
func (mh *MarketHistory) Update(ctx context.Context, db DB) error {
	switch {
	case !mh._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case mh._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.market_history SET ` +
		`date = $1, closing_price = $2, opening_price = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, mh.Date, mh.ClosingPrice, mh.OpeningPrice, mh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, mh.Date, mh.ClosingPrice, mh.OpeningPrice, mh.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the MarketHistory to the database.
func (mh *MarketHistory) Save(ctx context.Context, db DB) error {
	if mh.Exists() {
		return mh.Update(ctx, db)
	}
	return mh.Insert(ctx, db)
}

// Upsert performs an upsert for MarketHistory.
func (mh *MarketHistory) Upsert(ctx context.Context, db DB) error {
	switch {
	case mh._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.market_history (` +
		`id, date, closing_price, opening_price` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`date = EXCLUDED.date, closing_price = EXCLUDED.closing_price, opening_price = EXCLUDED.opening_price `
	// run
	logf(sqlstr, mh.ID, mh.Date, mh.ClosingPrice, mh.OpeningPrice)
	if _, err := db.ExecContext(ctx, sqlstr, mh.ID, mh.Date, mh.ClosingPrice, mh.OpeningPrice); err != nil {
		return logerror(err)
	}
	// set exists
	mh._exists = true
	return nil
}

// Delete deletes the MarketHistory from the database.
func (mh *MarketHistory) Delete(ctx context.Context, db DB) error {
	switch {
	case !mh._exists: // doesn't exist
		return nil
	case mh._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.market_history ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, mh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, mh.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	mh._deleted = true
	return nil
}

// MarketHistoryByDate retrieves a row from 'public.market_history' as a MarketHistory.
//
// Generated from index 'market_history_date_index'.
func MarketHistoryByDate(ctx context.Context, db DB, date sql.NullTime) (*MarketHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, date, closing_price, opening_price ` +
		`FROM public.market_history ` +
		`WHERE date = $1`
	// run
	logf(sqlstr, date)
	mh := MarketHistory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, date).Scan(&mh.ID, &mh.Date, &mh.ClosingPrice, &mh.OpeningPrice); err != nil {
		return nil, logerror(err)
	}
	return &mh, nil
}

// MarketHistoryByID retrieves a row from 'public.market_history' as a MarketHistory.
//
// Generated from index 'market_history_pkey'.
func MarketHistoryByID(ctx context.Context, db DB, id int64) (*MarketHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, date, closing_price, opening_price ` +
		`FROM public.market_history ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	mh := MarketHistory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&mh.ID, &mh.Date, &mh.ClosingPrice, &mh.OpeningPrice); err != nil {
		return nil, logerror(err)
	}
	return &mh, nil
}
