package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// LastFetchedCounter represents a row from 'public.last_fetched_counters'.
type LastFetchedCounter struct {
	CounterType string          `json:"counter_type"` // counter_type
	Value       sql.NullFloat64 `json:"value"`        // value
	InsertedAt  time.Time       `json:"inserted_at"`  // inserted_at
	UpdatedAt   time.Time       `json:"updated_at"`   // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the LastFetchedCounter exists in the database.
func (lfc *LastFetchedCounter) Exists() bool {
	return lfc._exists
}

// Deleted returns true when the LastFetchedCounter has been marked for deletion from
// the database.
func (lfc *LastFetchedCounter) Deleted() bool {
	return lfc._deleted
}

// Insert inserts the LastFetchedCounter to the database.
func (lfc *LastFetchedCounter) Insert(ctx context.Context, db DB) error {
	switch {
	case lfc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case lfc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.last_fetched_counters (` +
		`counter_type, value, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, lfc.CounterType, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, lfc.CounterType, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	lfc._exists = true
	return nil
}

// Update updates a LastFetchedCounter in the database.
func (lfc *LastFetchedCounter) Update(ctx context.Context, db DB) error {
	switch {
	case !lfc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case lfc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.last_fetched_counters SET ` +
		`value = $1, inserted_at = $2, updated_at = $3 ` +
		`WHERE counter_type = $4`
	// run
	logf(sqlstr, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt, lfc.CounterType)
	if _, err := db.ExecContext(ctx, sqlstr, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt, lfc.CounterType); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the LastFetchedCounter to the database.
func (lfc *LastFetchedCounter) Save(ctx context.Context, db DB) error {
	if lfc.Exists() {
		return lfc.Update(ctx, db)
	}
	return lfc.Insert(ctx, db)
}

// Upsert performs an upsert for LastFetchedCounter.
func (lfc *LastFetchedCounter) Upsert(ctx context.Context, db DB) error {
	switch {
	case lfc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.last_fetched_counters (` +
		`counter_type, value, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (counter_type) DO ` +
		`UPDATE SET ` +
		`value = EXCLUDED.value, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, lfc.CounterType, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, lfc.CounterType, lfc.Value, lfc.InsertedAt, lfc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	lfc._exists = true
	return nil
}

// Delete deletes the LastFetchedCounter from the database.
func (lfc *LastFetchedCounter) Delete(ctx context.Context, db DB) error {
	switch {
	case !lfc._exists: // doesn't exist
		return nil
	case lfc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.last_fetched_counters ` +
		`WHERE counter_type = $1`
	// run
	logf(sqlstr, lfc.CounterType)
	if _, err := db.ExecContext(ctx, sqlstr, lfc.CounterType); err != nil {
		return logerror(err)
	}
	// set deleted
	lfc._deleted = true
	return nil
}

// LastFetchedCounterByCounterType retrieves a row from 'public.last_fetched_counters' as a LastFetchedCounter.
//
// Generated from index 'last_fetched_counters_pkey'.
func LastFetchedCounterByCounterType(ctx context.Context, db DB, counterType string) (*LastFetchedCounter, error) {
	// query
	const sqlstr = `SELECT ` +
		`counter_type, value, inserted_at, updated_at ` +
		`FROM public.last_fetched_counters ` +
		`WHERE counter_type = $1`
	// run
	logf(sqlstr, counterType)
	lfc := LastFetchedCounter{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, counterType).Scan(&lfc.CounterType, &lfc.Value, &lfc.InsertedAt, &lfc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &lfc, nil
}
