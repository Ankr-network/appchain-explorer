package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// DecompiledSmartContract represents a row from 'public.decompiled_smart_contracts'.
type DecompiledSmartContract struct {
	ID                   int64     `json:"id"`                     // id
	DecompilerVersion    string    `json:"decompiler_version"`     // decompiler_version
	DecompiledSourceCode string    `json:"decompiled_source_code"` // decompiled_source_code
	AddressHash          []byte    `json:"address_hash"`           // address_hash
	InsertedAt           time.Time `json:"inserted_at"`            // inserted_at
	UpdatedAt            time.Time `json:"updated_at"`             // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DecompiledSmartContract exists in the database.
func (dsc *DecompiledSmartContract) Exists() bool {
	return dsc._exists
}

// Deleted returns true when the DecompiledSmartContract has been marked for deletion from
// the database.
func (dsc *DecompiledSmartContract) Deleted() bool {
	return dsc._deleted
}

// Insert inserts the DecompiledSmartContract to the database.
func (dsc *DecompiledSmartContract) Insert(ctx context.Context, db DB) error {
	switch {
	case dsc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dsc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.decompiled_smart_contracts (` +
		`decompiler_version, decompiled_source_code, address_hash, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt).Scan(&dsc.ID); err != nil {
		return logerror(err)
	}
	// set exists
	dsc._exists = true
	return nil
}

// Update updates a DecompiledSmartContract in the database.
func (dsc *DecompiledSmartContract) Update(ctx context.Context, db DB) error {
	switch {
	case !dsc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dsc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.decompiled_smart_contracts SET ` +
		`decompiler_version = $1, decompiled_source_code = $2, address_hash = $3, inserted_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt, dsc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt, dsc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DecompiledSmartContract to the database.
func (dsc *DecompiledSmartContract) Save(ctx context.Context, db DB) error {
	if dsc.Exists() {
		return dsc.Update(ctx, db)
	}
	return dsc.Insert(ctx, db)
}

// Upsert performs an upsert for DecompiledSmartContract.
func (dsc *DecompiledSmartContract) Upsert(ctx context.Context, db DB) error {
	switch {
	case dsc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.decompiled_smart_contracts (` +
		`id, decompiler_version, decompiled_source_code, address_hash, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`decompiler_version = EXCLUDED.decompiler_version, decompiled_source_code = EXCLUDED.decompiled_source_code, address_hash = EXCLUDED.address_hash, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dsc.ID, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsc.ID, dsc.DecompilerVersion, dsc.DecompiledSourceCode, dsc.AddressHash, dsc.InsertedAt, dsc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsc._exists = true
	return nil
}

// Delete deletes the DecompiledSmartContract from the database.
func (dsc *DecompiledSmartContract) Delete(ctx context.Context, db DB) error {
	switch {
	case !dsc._exists: // doesn't exist
		return nil
	case dsc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.decompiled_smart_contracts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dsc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dsc._deleted = true
	return nil
}

// DecompiledSmartContractByAddressHashDecompilerVersion retrieves a row from 'public.decompiled_smart_contracts' as a DecompiledSmartContract.
//
// Generated from index 'address_decompiler_version'.
func DecompiledSmartContractByAddressHashDecompilerVersion(ctx context.Context, db DB, addressHash []byte, decompilerVersion string) (*DecompiledSmartContract, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, decompiler_version, decompiled_source_code, address_hash, inserted_at, updated_at ` +
		`FROM public.decompiled_smart_contracts ` +
		`WHERE address_hash = $1 AND decompiler_version = $2`
	// run
	logf(sqlstr, addressHash, decompilerVersion)
	dsc := DecompiledSmartContract{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, addressHash, decompilerVersion).Scan(&dsc.ID, &dsc.DecompilerVersion, &dsc.DecompiledSourceCode, &dsc.AddressHash, &dsc.InsertedAt, &dsc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsc, nil
}

// DecompiledSmartContractByID retrieves a row from 'public.decompiled_smart_contracts' as a DecompiledSmartContract.
//
// Generated from index 'decompiled_smart_contracts_pkey'.
func DecompiledSmartContractByID(ctx context.Context, db DB, id int64) (*DecompiledSmartContract, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, decompiler_version, decompiled_source_code, address_hash, inserted_at, updated_at ` +
		`FROM public.decompiled_smart_contracts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dsc := DecompiledSmartContract{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dsc.ID, &dsc.DecompilerVersion, &dsc.DecompiledSourceCode, &dsc.AddressHash, &dsc.InsertedAt, &dsc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsc, nil
}

// Address returns the Address associated with the DecompiledSmartContract's (AddressHash).
//
// Generated from foreign key 'decompiled_smart_contracts_address_hash_fkey'.
func (dsc *DecompiledSmartContract) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByHash(ctx, db, dsc.AddressHash)
}
