package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Administrator represents a row from 'public.administrators'.
type Administrator struct {
	ID         int64     `json:"id"`          // id
	Role       string    `json:"role"`        // role
	UserID     int64     `json:"user_id"`     // user_id
	InsertedAt time.Time `json:"inserted_at"` // inserted_at
	UpdatedAt  time.Time `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Administrator exists in the database.
func (a *Administrator) Exists() bool {
	return a._exists
}

// Deleted returns true when the Administrator has been marked for deletion from
// the database.
func (a *Administrator) Deleted() bool {
	return a._deleted
}

// Insert inserts the Administrator to the database.
func (a *Administrator) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.administrators (` +
		`role, user_id, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt).Scan(&a.ID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a Administrator in the database.
func (a *Administrator) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.administrators SET ` +
		`role = $1, user_id = $2, inserted_at = $3, updated_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Administrator to the database.
func (a *Administrator) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for Administrator.
func (a *Administrator) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.administrators (` +
		`id, role, user_id, inserted_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`role = EXCLUDED.role, user_id = EXCLUDED.user_id, inserted_at = EXCLUDED.inserted_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, a.ID, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.Role, a.UserID, a.InsertedAt, a.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the Administrator from the database.
func (a *Administrator) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.administrators ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AdministratorByID retrieves a row from 'public.administrators' as a Administrator.
//
// Generated from index 'administrators_pkey'.
func AdministratorByID(ctx context.Context, db DB, id int64) (*Administrator, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, role, user_id, inserted_at, updated_at ` +
		`FROM public.administrators ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	a := Administrator{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.Role, &a.UserID, &a.InsertedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AdministratorByUserID retrieves a row from 'public.administrators' as a Administrator.
//
// Generated from index 'administrators_user_id_index'.
func AdministratorByUserID(ctx context.Context, db DB, userID int64) (*Administrator, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, role, user_id, inserted_at, updated_at ` +
		`FROM public.administrators ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	a := Administrator{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&a.ID, &a.Role, &a.UserID, &a.InsertedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AdministratorByRole retrieves a row from 'public.administrators' as a Administrator.
//
// Generated from index 'owner_role_limit'.
func AdministratorByRole(ctx context.Context, db DB, role string) (*Administrator, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, role, user_id, inserted_at, updated_at ` +
		`FROM public.administrators ` +
		`WHERE role = $1`
	// run
	logf(sqlstr, role)
	a := Administrator{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, role).Scan(&a.ID, &a.Role, &a.UserID, &a.InsertedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}