package entity

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// TransactionStat represents a row from 'public.transaction_stats'.
type TransactionStat struct {
	ID                   int64           `json:"id"`                     // id
	Date                 sql.NullTime    `json:"date"`                   // date
	NumberOfTransactions sql.NullInt64   `json:"number_of_transactions"` // number_of_transactions
	GasUsed              sql.NullFloat64 `json:"gas_used"`               // gas_used
	TotalFee             sql.NullFloat64 `json:"total_fee"`              // total_fee
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the TransactionStat exists in the database.
func (ts *TransactionStat) Exists() bool {
	return ts._exists
}

// Deleted returns true when the TransactionStat has been marked for deletion from
// the database.
func (ts *TransactionStat) Deleted() bool {
	return ts._deleted
}

// Insert inserts the TransactionStat to the database.
func (ts *TransactionStat) Insert(ctx context.Context, db DB) error {
	switch {
	case ts._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ts._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.transaction_stats (` +
		`date, number_of_transactions, gas_used, total_fee` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee)
	if err := db.QueryRowContext(ctx, sqlstr, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee).Scan(&ts.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ts._exists = true
	return nil
}

// Update updates a TransactionStat in the database.
func (ts *TransactionStat) Update(ctx context.Context, db DB) error {
	switch {
	case !ts._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ts._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.transaction_stats SET ` +
		`date = $1, number_of_transactions = $2, gas_used = $3, total_fee = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee, ts.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee, ts.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the TransactionStat to the database.
func (ts *TransactionStat) Save(ctx context.Context, db DB) error {
	if ts.Exists() {
		return ts.Update(ctx, db)
	}
	return ts.Insert(ctx, db)
}

// Upsert performs an upsert for TransactionStat.
func (ts *TransactionStat) Upsert(ctx context.Context, db DB) error {
	switch {
	case ts._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.transaction_stats (` +
		`id, date, number_of_transactions, gas_used, total_fee` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`date = EXCLUDED.date, number_of_transactions = EXCLUDED.number_of_transactions, gas_used = EXCLUDED.gas_used, total_fee = EXCLUDED.total_fee `
	// run
	logf(sqlstr, ts.ID, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee)
	if _, err := db.ExecContext(ctx, sqlstr, ts.ID, ts.Date, ts.NumberOfTransactions, ts.GasUsed, ts.TotalFee); err != nil {
		return logerror(err)
	}
	// set exists
	ts._exists = true
	return nil
}

// Delete deletes the TransactionStat from the database.
func (ts *TransactionStat) Delete(ctx context.Context, db DB) error {
	switch {
	case !ts._exists: // doesn't exist
		return nil
	case ts._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.transaction_stats ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ts.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ts.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ts._deleted = true
	return nil
}

// TransactionStatByDate retrieves a row from 'public.transaction_stats' as a TransactionStat.
//
// Generated from index 'transaction_stats_date_index'.
func TransactionStatByDate(ctx context.Context, db DB, date sql.NullTime) (*TransactionStat, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, date, number_of_transactions, gas_used, total_fee ` +
		`FROM public.transaction_stats ` +
		`WHERE date = $1`
	// run
	logf(sqlstr, date)
	ts := TransactionStat{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, date).Scan(&ts.ID, &ts.Date, &ts.NumberOfTransactions, &ts.GasUsed, &ts.TotalFee); err != nil {
		return nil, logerror(err)
	}
	return &ts, nil
}

// TransactionStatByID retrieves a row from 'public.transaction_stats' as a TransactionStat.
//
// Generated from index 'transaction_stats_pkey'.
func TransactionStatByID(ctx context.Context, db DB, id int64) (*TransactionStat, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, date, number_of_transactions, gas_used, total_fee ` +
		`FROM public.transaction_stats ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ts := TransactionStat{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ts.ID, &ts.Date, &ts.NumberOfTransactions, &ts.GasUsed, &ts.TotalFee); err != nil {
		return nil, logerror(err)
	}
	return &ts, nil
}
